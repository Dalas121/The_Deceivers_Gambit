#textdomain wesnoth-tdg



# need to put this in each scenario, since it isn't compatible with [campaign]
# similar to darkred, but with a different minimap color. Used for wesnoth's army
#define DEFINE_WESRED
    [color_range]
        id=wesred
        rgb=8A0808,FFFFFF,000000,BB0000
    [/color_range]
#enddef


#define SINGLEUNITWML_DELFADOR
    side,id,name,profile=1,Delfador,_"Delfador",portraits/younger_delfador.webp
    canrecruit=yes
    [modifications]
        [trait]
            id,name,description=loyal_dummy,loyal,_"Zero upkeep."
        [/trait]
        [trait]
            id,name,description=intelligent_dummy,intelligent,_""
        [/trait]
        {TEAM_COLOR_OVERRIDE (id=Delfador) purple}
    [/modifications]
#enddef
#define DELFADOR_EARLY_RECRUIT
    Mage,Spearman,Bowman#enddef
#define DELFADOR_MIDDLE_RECRUIT
    Mage,Spearman,Bowman,Heavy Infantryman,Fencer#enddef
#define DELFADOR_BANDIT_RECRUIT
    Footpad,Thief,Rogue Mage#enddef
#define DELFADOR_CAVALRY_RECRUIT
    Cavalryman,Horseman#enddef


#define SINGLEUNITWML_METHOR
    type,id,name,profile=Mage of Light,Methor,_"Methor",portraits/methor.webp
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () white}
    [/modifications]
#enddef
#define SINGLEUNITWML_METHOR_OLD
    type,id,name,profile=Mage of Light,Methor,_"Methor",portraits/methor.webp
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_AGED}
        {TEAM_COLOR_OVERRIDE () white}
    [/modifications]
#enddef
#define SINGLEUNITWML_DEORAN
    type,id,name=Ambassador,Deoran,_"Deoran"
    [modifications]
        {TRAIT_LOYAL_HERO} {TRAIT_INTELLIGENT}
        {TEAM_COLOR_OVERRIDE () green}
    [/modifications]
#enddef


#define SINGLEUNITWML_GARARD
    #
    type,id,name=King of Wesnoth,Garard,_"Garard II"
    canrecruit=yes
    [modifications]
        {TRAIT_STRONG} {TRAIT_RESILIENT}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
#enddef
#define SINGLEUNITWML_ARAND
    #
    type,id,name,profile=Prince of Wesnoth,Arand,_"Arand",portraits/humans/marshal-2.webp
    canrecruit=yes
    [modifications]
        {TRAIT_INTELLIGENT} {TRAIT_QUICK}
#         {TEAM_COLOR_OVERRIDE () purple} # looks kinda funny; wesred will work fine
    [/modifications]
#enddef
#define SINGLEUNITWML_ASHEVIERE
    #
    type,id,name=Queen Consort,Asheviere,_"Asheviere"
    [modifications]
        {TRAIT_QUICK} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
    [/modifications]
#enddef
#define SINGLEUNITWML_ELDRED
    #
    type,id,name,profile=Crown Prince,Eldred,_"Eldred",portraits/eldred.webp
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
#enddef
#define SINGLEUNITWML_ELDRED_UNARMED
    #
    type,id,name,profile=Unarmed Eldred,Eldred,_"Eldred",portraits/eldred.webp
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TRAIT_LOYAL_HERO_NOSLOT}
        {TEAM_COLOR_OVERRIDE () purple}
    [/modifications]
#enddef

#define SINGLEUNITWML_LIONEL
    #
    type,id,name,profile=General,Lionel,_"Lionel",portraits/lionel.webp
    canrecruit=yes
    [modifications]
        {TRAIT_QUICK} {TRAIT_STRONG}
        {TEAM_COLOR_OVERRIDE () orange}
    [/modifications]
#enddef
#define SINGLEUNITWML_MADDOCK
    #
    type,id,name,profile=Lord of Elensefar,Maddock,_"Lord Maddock",portraits/maddock.webp
    canrecruit=yes
    [modifications]
        {TRAIT_INTELLIGENT} {TRAIT_RESILIENT}
        {TEAM_COLOR_OVERRIDE () blue}
    [/modifications]
#enddef
#define SINGLEUNITWML_KESTREL
    #
    type,id,name=Royal Guard,Kestrel,_"Captain Kestrel"
    [modifications]
        {TRAIT_RESILIENT} {TRAIT_INTELLIGENT}
        {TEAM_COLOR_OVERRIDE () gold}
    [/modifications]
#enddef

#define RESTORE_METHOR
    [if] {VARIABLE_CONDITIONAL stored_methor.length greater_than 0} {THEN(
        [store_unit]
            {FILTER id=Methor}
            variable=tmp_methor
        [/store_unit]
        {VARIABLE stored_methor.x $tmp_methor.x}
        {VARIABLE stored_methor.y $tmp_methor.y}
        {VARIABLE stored_methor.side $tmp_methor.side}
        {VARIABLE stored_methor.facing $tmp_methor.facing}
        {VARIABLE stored_methor.canrecruit $tmp_methor.canrecruit}
        {VARIABLE stored_methor.hitpoints $tmp_methor.hitpoints}
        {VARIABLE stored_methor.status.poisoned no}
        {VARIABLE stored_methor.status.slowed no}
        [unstore_unit]
            variable=stored_methor
        [/unstore_unit]
        {FULL_HEAL id=Methor}
        {CLEAR_VARIABLE stored_methor,tmp_methor}
    )} [/if]
#enddef
#define RESTORE_GARARD
    [if] {VARIABLE_CONDITIONAL stored_garard.length greater_than 0} {THEN(
       [store_unit]
            {FILTER id=Garard}
            variable=tmp_garard
        [/store_unit]
        {VARIABLE stored_garard.x $tmp_garard.x}
        {VARIABLE stored_garard.y $tmp_garard.y}
        {VARIABLE stored_garard.side $tmp_garard.side}
        {VARIABLE stored_garard.facing $tmp_garard.facing}
        {VARIABLE stored_garard.canrecruit $tmp_garard.canrecruit}
        {VARIABLE stored_garard.hitpoints $tmp_garard.hitpoints}
        {VARIABLE stored_garard.status.poisoned no}
        {VARIABLE stored_garard.status.slowed no}
        [unstore_unit]
            variable=stored_garard
        [/unstore_unit]
        {FULL_HEAL id=Garard}
        {CLEAR_VARIABLE stored_garard,tmp_garard}
    )} [/if]
#enddef












# identify a bandit companion for Delfador, during the saurian arc
#define GET_COMPANION_ID
#arg SEARCH_RECALL
no#endarg
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR id=Lynyan id companion_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR id=Barin  id companion_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,3-99}) id companion_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,2   }) id companion_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,1   }) id companion_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$companion_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND side,level=1,0   }) id companion_id})} [/if]
    {STORE_UNIT_VAR id=$companion_id name companion_name}
#enddef
#define RECALL_COMPANION X Y
    {GET_COMPANION_ID SEARCH_RECALL=yes}
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $companion_id {X} {Y}})} [/if]
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({GENERIC_UNIT 1 Footpad {X} {Y}})} [/if]
    {GET_COMPANION_ID}
#enddef

# identify and recall a veteran from Delfador's bandit recruit list
#define RECALL_BANDIT MIN_LEVEL X Y BACKUP_TYPE
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id bandit_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id bandit_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$bandit_id})} {THEN({STORE_UNIT_VAR (type_adv_tree=Poacher,{DELFADOR_BANDIT_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id bandit_id})} [/if]
    
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $bandit_id {X} {Y}})} [/if]
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {GENERIC_UNIT 1 {BACKUP_TYPE} {X} {Y}}
    )} [/if]
    {CLEAR_VARIABLE bandit_id}
#enddef

# identify and recall a veteran from Delfador's infantry recruit list
#define RECALL_INFANTRYMAN MIN_LEVEL X Y BACKUP_TYPE TRAIT_WML
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id infantryman_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id infantryman_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$infantryman_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_MIDDLE_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id infantryman_id})} [/if]
    
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $infantryman_id {X} {Y}})} [/if]
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {NOTRAIT_UNIT 1 {BACKUP_TYPE} {X} {Y}}
        {TRAIT_WML} # spawned units in S10 really should be quick, or else they'll stuggle to get across the water
    )} [/if]
    {CLEAR_VARIABLE infantryman_id}
#enddef

# identify and recall a veteran from Delfador's cavalry recruit list
#define RECALL_HORSE MIN_LEVEL X Y BACKUP_TYPE
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,3-99             }) id horse_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,2                }) id horse_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id=yes,$horse_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND x,y=recall,recall} {AND side,level=1,{MIN_LEVEL}-99   }) id horse_id})} [/if]
    
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $horse_id {X} {Y}})} [/if]
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN(
        {GENERIC_UNIT 1 {BACKUP_TYPE} {X} {Y}}
    )} [/if]
    {CLEAR_VARIABLE horse_id}
#enddef

#define GET_HORSELORD_ID
#arg SEARCH_RECALL
no#endarg
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR id=Kaylan id horselord_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,3-99}) id horselord_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,2   }) id horselord_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,1   }) id horselord_id})} [/if]
    [if] {NOT({HAVE_UNIT search_recall_list,id={SEARCH_RECALL},$horselord_id})} {THEN({STORE_UNIT_VAR (type_adv_tree={DELFADOR_CAVALRY_RECRUIT} {AND side,level=1,0   }) id horselord_id})} [/if]
    {STORE_UNIT_VAR id=$horselord_id name horselord_name}
#enddef
#define RECALL_HORSELORD X Y
    {GET_HORSELORD_ID SEARCH_RECALL=yes}
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({RECALL_XY $horselord_id {X} {Y}})} [/if]
    [if] {NOT({HAVE_UNIT x,y={X},{Y}})} {THEN({GENERIC_UNIT 1 Horseman {X} {Y}})} [/if]
    {GET_HORSELORD_ID}
#enddef



















#define HERODEATHS
    experience_modifier={ON_DIFFICULTY4 50 80 100 110}
    # this really doesn't belong in HERODEATHS, but HERODEATHS is an easy way to put it in every scenario
    # if I change this number, ALSO CHANGE DELFADOR'S XP SCALING so his max XP stays the same on all difficulties
    
    [event]
        name=last breath {FILTER id,level=Delfador,0-2}
        id=herodeath_delfador12
        [message]
            speaker=Delfador
            message=_"No, it can’t end yet! I have so much left to do..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id,level=Delfador,3}
        id=herodeath_delfador3
        [message]
            speaker=Delfador
            message=_"No! Magic, why have you failed me..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id,level=Delfador,4-99}
        id=herodeath_delfador4
        [message]
            speaker=Delfador
            message=_"If only I had been a little wiser..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Methor}
        id=herodeath_methor
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Methor
            message=_"War, pain, death... I tried so hard to change things..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Deoran}
        id=herodeath_deoran
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Deoran
            message=_"I have failed my kingdom and my duty..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    
    
    [event]
        name=last breath {FILTER id=Garard}
        [message]
            speaker=Garard
            #po: reference to Shakespeare's Richard III
            message=_"A horse! A horse! My kingdom for a horse..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Asheviere}
        [message]
            speaker=Asheviere
            message=_"It’s finally over..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Lionel}
        [message]
            speaker=Lionel
            message=_"Blasted orcs..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    
    
    [event]
        name=last breath {FILTER id=Kalenz}
        id=herodeath_kalenz
        [message]
            speaker=Kalenz
            message=_"Nobody can cheat death forever..."
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath {FILTER id=Chantal}
        id=herodeath_chantal
        [message]
            speaker=Chantal
            message=_"Deoran, I never had a chance to tell you—"
        [/message]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    
    [event]
        name=last breath
        {FILTER id=$companion_id}
        {FILTER id=Lynyan}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [if] {HAVE_UNIT id=Delfador,Deoran} {THEN([message]
            speaker=Lynyan
            message=_"Boss, I ’aint feelin’ too hot..."
        [/message])} {ELSE([message]
            speaker=Lynyan
            message=_"I ’aint feelin’ too hot..."
        [/message])} [/if]
    [/event]
    [event]
        name=last breath
        {FILTER id=$companion_id}
        {FILTER id=Barin}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Barin
            message=_"I shoulda never left my swamp..."
        [/message]
    [/event]
    [event]
        name=last breath
        {FILTER id=Kaylan}
        {FILTER_CONDITION( {NOT( {CONTINGENCY_GLOBAL_CONDITIONS} )} )}
        [message]
            speaker=Kaylan
            message=_"My horse is slain; I must flee the field! Fight on without me, comrades..."
        [/message]
        # since he reappears in HttT's blackwater port, he can't die here
    [/event]
#enddef










